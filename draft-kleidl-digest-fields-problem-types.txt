



Network Working Group                                          M. Kleidl
Internet-Draft                                               Transloadit
Intended status: Informational                              27 June 2024
Expires: 29 December 2024


                  HTTP Problem Types for Digest Fields
            draft-kleidl-digest-fields-problem-types-latest

Abstract

   TODO Abstract

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://tus.github.io/draft-digest-fields-problem-types/draft-kleidl-
   digest-fields-problem-types.html.  Status information for this
   document may be found at https://datatracker.ietf.org/doc/draft-
   kleidl-digest-fields-problem-types/.

   Source for this draft and an issue tracker can be found at
   https://github.com/tus/draft-digest-fields-problem-types.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 29 December 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Problem Types
     3.1.  Unsupported Hashing Algorithm
   4.  Security Considerations
   5.  IANA Considerations
   6.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   Digest fields [DIGEST] are HTTP fields that support integrity
   digests.  A request can include the Content-Digest and Repr-Digest
   header fields for verifying the integrity of the HTTP message content
   and the HTTP representation, respectively.  In addition, a sender can
   include the Want-Content-Digest and Want-Repr-Digest header fields in
   a request to express interest in receiving integrity field in the
   response.  [RFC9530] by design does not define, require or recommend
   specific resource behavior if errors regarding the integrity appear.

   For example, a request may include a digest algorithm in the Content-
   Digest and Repr-Digest header fields that the resource does not
   support.  Similar, a sender may request to the digest utilizing a
   hashing algorithm that the resource does not support.  Another
   possible problem is that the digest supplied in the request does not
   match up with the digest calculated by the resource.  Depending on
   the application, the resource may choose to ignore these errors or
   communicate them back to the client.  However, no recommended
   response format for communicating these error is defined so far.

   Problem types [PROBLEM] are machine-readable description of errors in
   HTTP response content [PROBLEM].  Each problem definition includes a
   unique type that can be used to identify the error and also allows
   the attachment of a short, human-readable summary as well as
   additional properties to aid debugging and error handling.  In
   addition, a JSON and XML representation of the problem types is
   defined to simplify parsing.

   As an example, if the resource receives a request with an integrity
   field utilizing an unsupported hashing algorithm foo, the response
   may use the following problem type:

   HTTP/1.1 400 Bad Request
   Content-Type: application/problem+json

   {
     "type": "https://iana.org/assignments/http-problem-types#unsupported-hashing-algorithm",
     "title": "upload is already completed",
     "requested-algorithm": "foo",
     "supported-algorithms": ["sha-256", "sha-512"]
   }

   The response includes the unique problem type, the requested
   algorithm that is not supported by the resource, as well as an array
   of the supported algorithms.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The terms "integrity fields" and "integrity preference fields" are
   from [DIGEST].

3.  Problem Types

3.1.  Unsupported Hashing Algorithm

   This section defines the https://iana.org/assignments/http-problem-
   types#unsupported-hashing-algorithm problem type [PROBLEM].  A
   resource MAY use this problem type in a response to a request, whose
   integrity or integrity preference fields reference a hashing
   algorithm that the resource can not or does not want to support for
   this request, and if the resource wants to indicate this problem to
   the sender.

   The resource SHOULD provide the algorithm key of the unsupported
   algorithm in the unsupported-algorithm member and an array of the
   supported algorithms in the supported-algorithm member.  The value of
   this array are algorithm keys as registered in the "Hash Algorithms
   for HTTP Digest Fields" registry.

   The following example shows a response for a request with an
   integrity field utilizing an unsupported hashing algorithm foo.  The
   response also includes a list of supported algorithms.

   HTTP/1.1 400 Bad Request
   Content-Type: application/problem+json

   {
     "type": "https://iana.org/assignments/http-problem-types#unsupported-hashing-algorithm",
     "title": "upload is already completed",
     "unsupported-algorithm": "foo",
     "supported-algorithms": ["sha-256", "sha-512"]
   }

4.  Security Considerations

   Although an error appeared while handling the digest fields, the
   resource may choose to not disclose this error to the sender to avoid
   lacking implementation details.  Similar, the resource may choose a
   general problem type for the response even in a more specific problem
   type is defined if it prefers to hide the details of the error from
   the sender.

5.  IANA Considerations

   IANA is asked to register the following entry in the "HTTP Problem
   Types" registry:

   Type URI:  https://iana.org/assignments/http-problem-
      types#unsupported-hashing-algorithm

   Title:  Unsupported Hashing Algorithm

   Recommended HTTP status code:  400

   Reference:  This document

6.  Normative References

   [DIGEST]   Polli, R. and L. Pardue, "Digest Fields", RFC 9530,
              DOI 10.17487/RFC9530, February 2024,
              <https://www.rfc-editor.org/rfc/rfc9530>.

   [PROBLEM]  Nottingham, M., Wilde, E., and S. Dalal, "Problem Details
              for HTTP APIs", RFC 9457, DOI 10.17487/RFC9457, July 2023,
              <https://www.rfc-editor.org/rfc/rfc9457>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

   [RFC9530]  Polli, R. and L. Pardue, "Digest Fields", RFC 9530,
              DOI 10.17487/RFC9530, February 2024,
              <https://www.rfc-editor.org/rfc/rfc9530>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Marius Kleidl
   Transloadit
   Email: marius@transloadit.com
